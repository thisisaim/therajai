generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      Role     @default(CLIENT)
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  clientProfile    ClientProfile?
  therapistProfile TherapistProfile?

  clientAppointments    Appointment[] @relation("ClientAppointments")
  therapistAppointments Appointment[] @relation("TherapistAppointments")

  clientSessions    Session[] @relation("ClientSessions")
  therapistSessions Session[] @relation("TherapistSessions")

  payments Payment[]
  hostedCalls VideoCall[]
  subscriptions TherapistSubscription[]
  paymentMethods PaymentMethod[]
  commissions Commission[] @relation("TherapistCommissions")
  payouts Payout[] @relation("TherapistPayouts")
  clickEvents ClickEvent[]

  @@map("users")
}

model ClientProfile {
  id                 String    @id @default(cuid())
  userId             String    @unique
  firstName          String
  lastName           String
  dateOfBirth        DateTime?
  phone              String?
  address            String?
  emergencyContact   String?
  emergencyPhone     String?
  insuranceProvider  String?
  insuranceNumber    String?
  mentalHealthHistory String?
  currentMedications String?
  preferredLanguage  Language @default(THAI)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("client_profiles")
}

model TherapistProfile {
  id                String    @id @default(cuid())
  userId            String    @unique
  firstName         String
  lastName          String
  title             String?
  phone             String?
  dateOfBirth       DateTime?
  licenseNumber     String    @unique
  specializations   String[]
  experience        Int
  education         String
  languages         String[]
  bio               String
  hourlyRate        Decimal
  availableOnline   Boolean   @default(true)
  availableInPerson Boolean   @default(false)
  address           String?
  verified          Boolean   @default(false)
  rejected          Boolean   @default(false)
  verificationNotes String?
  verifiedAt        DateTime?
  verifiedBy        String?
  rating            Decimal   @default(0)
  totalSessions     Int       @default(0)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  availability TherapistAvailability[]

  @@map("therapist_profiles")
}

model TherapistAvailability {
  id          String    @id @default(cuid())
  therapistId String
  dayOfWeek   Int       // 0 = Sunday, 1 = Monday, etc.
  startTime   String    // HH:MM format
  endTime     String    // HH:MM format
  isAvailable Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  therapist TherapistProfile @relation(fields: [therapistId], references: [id], onDelete: Cascade)

  @@map("therapist_availability")
}

model Appointment {
  id          String            @id @default(cuid())
  clientId    String
  therapistId String
  dateTime    DateTime
  endTime     DateTime?
  duration    Int               @default(60) // in minutes
  type        AppointmentType   @default(ONLINE)
  status      AppointmentStatus @default(SCHEDULED)
  amount      Decimal?          // Amount in THB
  notes       String?
  sessionLink String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  client    User @relation("ClientAppointments", fields: [clientId], references: [id], onDelete: Cascade)
  therapist User @relation("TherapistAppointments", fields: [therapistId], references: [id], onDelete: Cascade)

  session Session?
  payment Payment?

  @@map("appointments")
}

model Session {
  id             String    @id @default(cuid())
  appointmentId  String    @unique
  clientId       String
  therapistId    String
  startTime      DateTime
  endTime        DateTime?
  sessionNotes   String?
  clientFeedback String?
  rating         Int?
  recordingUrl   String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  appointment Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  client      User        @relation("ClientSessions", fields: [clientId], references: [id], onDelete: Cascade)
  therapist   User        @relation("TherapistSessions", fields: [therapistId], references: [id], onDelete: Cascade)

  videoCalls VideoCall[]
  commission Commission?

  @@map("sessions")
}

model VideoCall {
  id          String           @id @default(cuid())
  sessionId   String?
  roomId      String           @unique
  hostId      String
  status      VideoCallStatus  @default(WAITING)
  startTime   DateTime?
  endTime     DateTime?
  duration    Int?             // in seconds
  participants Json            // Array of participant objects
  recordingEnabled Boolean     @default(false)
  recordingUrl String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  session Session? @relation(fields: [sessionId], references: [id], onDelete: SetNull)
  host    User     @relation(fields: [hostId], references: [id], onDelete: Cascade)

  @@map("video_calls")
}

model Payment {
  id                String        @id @default(cuid())
  appointmentId     String?       @unique
  clientId          String
  amount            Decimal
  currency          String        @default("THB")
  status            PaymentStatus @default(PENDING)
  paymentMethod     PaymentMethodType @default(STRIPE_CARD)
  stripePaymentId   String?
  stripeIntentId    String?
  promptPayRef      String?       // For PromptPay payments
  description       String?
  receiptUrl        String?
  refundedAmount    Decimal       @default(0)
  processingFee     Decimal       @default(0)
  netAmount         Decimal       @default(0) // Amount after fees
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  appointment Appointment? @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  client      User         @relation(fields: [clientId], references: [id], onDelete: Cascade)
  subscription TherapistSubscription?

  @@map("payments")
}

model TherapistSubscription {
  id             String               @id @default(cuid())
  therapistId    String
  planId         String
  paymentId      String               @unique
  status         SubscriptionStatus   @default(ACTIVE)
  startDate      DateTime             @default(now())
  endDate        DateTime
  autoRenew      Boolean              @default(true)
  stripeSubId    String?              // Stripe subscription ID
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt

  therapist User            @relation(fields: [therapistId], references: [id], onDelete: Cascade)
  plan      SubscriptionPlan @relation(fields: [planId], references: [id], onDelete: Cascade)
  payment   Payment          @relation(fields: [paymentId], references: [id], onDelete: Cascade)

  @@map("therapist_subscriptions")
}

model SubscriptionPlan {
  id            String    @id @default(cuid())
  name          String
  nameEn        String
  description   String
  descriptionEn String
  price         Decimal
  currency      String    @default("THB")
  duration      Int       // in days
  features      String[]  // JSON array of features
  isActive      Boolean   @default(true)
  stripePriceId String?   // Stripe price ID
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  subscriptions TherapistSubscription[]

  @@map("subscription_plans")
}

model PaymentMethod {
  id            String    @id @default(cuid())
  userId        String
  type          String    // 'card', 'promptpay', 'bank_transfer'
  stripeId      String?   // Stripe payment method ID
  last4         String?   // Last 4 digits for cards
  brand         String?   // Card brand or bank name
  isDefault     Boolean   @default(false)
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payment_methods")
}

model Commission {
  id            String         @id @default(cuid())
  sessionId     String         @unique
  therapistId   String
  amount        Decimal        // Total session amount
  commissionRate Decimal       // Commission rate (0.7 for 70%)
  commissionAmount Decimal     // Calculated commission amount
  platformFee   Decimal        // Platform fee amount
  status        CommissionStatus @default(PENDING)
  payoutId      String?        // Reference to payout when paid
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  session   Session      @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  therapist User         @relation("TherapistCommissions", fields: [therapistId], references: [id], onDelete: Cascade)
  payout    Payout?      @relation(fields: [payoutId], references: [id], onDelete: SetNull)

  @@map("commissions")
}

model Payout {
  id                String        @id @default(cuid())
  therapistId       String
  totalAmount       Decimal       // Total payout amount
  commissionCount   Int           // Number of commissions included
  status            PayoutStatus  @default(PENDING)
  paymentMethod     String?       // Bank transfer, etc.
  bankAccount       String?       // Therapist bank account
  processedAt       DateTime?
  stripeTransferId  String?       // Stripe transfer ID if using Stripe
  notes             String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  therapist   User         @relation("TherapistPayouts", fields: [therapistId], references: [id], onDelete: Cascade)
  commissions Commission[]

  @@map("payouts")
}

enum CommissionStatus {
  PENDING
  CALCULATED
  PAID
  DISPUTED
}

enum PayoutStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum Role {
  CLIENT
  THERAPIST
  ADMIN
}

enum Language {
  THAI
  ENGLISH
}

enum AppointmentType {
  ONLINE
  IN_PERSON
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum VideoCallStatus {
  WAITING
  ACTIVE
  ENDED
  CANCELLED
}

enum PaymentMethodType {
  STRIPE_CARD
  PROMPTPAY
  BANK_TRANSFER
  CASH
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
  SUSPENDED
  PENDING
}

model ClickEvent {
  id            String    @id @default(cuid())
  userId        String?   // Optional - for authenticated users
  sessionId     String    // Browser session ID
  elementType   String    // 'button', 'link', 'form', etc.
  elementId     String?   // HTML element ID
  elementClass  String?   // CSS class
  elementText   String?   // Text content of clicked element
  pageUrl       String    // Current page URL
  referrer      String?   // Where the user came from
  utmSource     String?   // UTM tracking parameters
  utmMedium     String?
  utmCampaign   String?
  utmContent    String?
  userAgent     String?   // Browser info
  ipAddress     String?   // User IP (hashed for privacy)
  timestamp     DateTime  @default(now())
  createdAt     DateTime  @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([timestamp])
  @@index([pageUrl])
  @@index([userId])
  @@index([sessionId])
  @@map("click_events")
}
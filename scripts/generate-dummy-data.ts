import { PrismaClient } from '@prisma/client'
import bcrypt from 'bcryptjs'

const prisma = new PrismaClient()

// Thai names and data
const thaiFirstNames = [
  '‡∏™‡∏°‡∏ä‡∏≤‡∏¢', '‡∏™‡∏°‡∏´‡∏ç‡∏¥‡∏á', '‡∏ß‡∏¥‡∏ä‡∏±‡∏¢', '‡∏ß‡∏¥‡∏†‡∏≤', '‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå', '‡∏õ‡∏£‡∏∞‡∏†‡∏≤', '‡∏≠‡∏ô‡∏∏‡∏ä‡∏≤', '‡∏≠‡∏ô‡∏∏‡∏ä‡∏¥‡∏ï', 
  '‡∏™‡∏∏‡∏£‡∏¥‡∏¢‡∏≤', '‡∏™‡∏∏‡∏†‡∏≤', '‡∏ò‡∏ô‡∏û‡∏•', '‡∏ò‡∏ô‡∏±‡∏ç‡∏ç‡∏≤', '‡∏õ‡∏ß‡∏µ‡∏ì‡∏≤', '‡∏õ‡∏ê‡∏°‡∏û‡∏£', '‡∏Å‡∏°‡∏•', '‡∏Å‡∏±‡∏ç‡∏ç‡∏≤',
  '‡∏ì‡∏±‡∏ê', '‡∏ì‡∏¥‡∏ä‡∏≤', '‡∏®‡∏±‡∏Å‡∏î‡∏¥‡πå', '‡∏®‡∏¥‡∏£‡∏¥', '‡∏£‡∏±‡∏ê', '‡∏£‡∏∏‡πà‡∏á', '‡∏ä‡∏±‡∏¢', '‡∏ä‡∏ô‡∏¥‡∏î‡∏≤', '‡πÑ‡∏û‡∏ö‡∏π‡∏•‡∏¢‡πå'
]

const thaiLastNames = [
  '‡πÉ‡∏à‡∏î‡∏µ', '‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠', '‡∏£‡∏±‡∏Å‡∏©‡∏≤', '‡∏î‡∏π‡πÅ‡∏•', '‡∏™‡∏∏‡∏Ç‡πÉ‡∏à', '‡∏°‡∏±‡πà‡∏ô‡∏Ñ‡∏á', '‡πÄ‡∏à‡∏£‡∏¥‡∏ç', '‡∏û‡∏±‡∏í‡∏ô‡∏≤',
  '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏Ñ‡πå', '‡∏Å‡πâ‡∏≤‡∏ß‡∏´‡∏ô‡πâ‡∏≤', '‡∏¢‡∏¥‡πà‡∏á‡πÉ‡∏´‡∏ç‡πà', '‡∏™‡∏∏‡∏Ç‡∏™‡∏±‡∏ô‡∏ï‡πå', '‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢', '‡∏ö‡∏≥‡∏£‡∏∏‡∏á', '‡πÄ‡∏™‡∏£‡∏¥‡∏°',
  '‡∏û‡∏π‡∏ô‡∏™‡∏∏‡∏Ç', '‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤', '‡∏™‡∏á‡∏ö', '‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢', '‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à', '‡πÅ‡∏ô‡πà‡∏ß‡πÅ‡∏ô‡πà', '‡∏¢‡∏∑‡∏ô‡∏¢‡∏á', '‡∏ñ‡∏≤‡∏ß‡∏£'
]

const specializations = [
  '‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î', '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡∏¥‡∏ï‡∏Å‡∏Å‡∏±‡∏á‡∏ß‡∏•', '‡∏†‡∏≤‡∏ß‡∏∞‡∏ã‡∏∂‡∏°‡πÄ‡∏®‡∏£‡πâ‡∏≤', '‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå',
  '‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß', '‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô', '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡πÉ‡∏ô‡∏ï‡∏ô‡πÄ‡∏≠‡∏á', '‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå',
  '‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏ô‡∏≠‡∏ô', '‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô', '‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ß‡∏±‡∏¢‡∏£‡∏∏‡πà‡∏ô', '‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ú‡∏π‡πâ‡∏™‡∏π‡∏á‡∏≠‡∏≤‡∏¢‡∏∏',
  '‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡πÄ‡∏Å‡∏°', '‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏±‡∏á‡∏Ñ‡∏°', '‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô', '‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û'
]

const universities = [
  '‡∏à‡∏∏‡∏¨‡∏≤‡∏•‡∏á‡∏Å‡∏£‡∏ì‡πå‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢', '‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏°‡∏´‡∏¥‡∏î‡∏•', '‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏ò‡∏£‡∏£‡∏°‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå',
  '‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà', '‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô', '‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏™‡∏á‡∏Ç‡∏•‡∏≤‡∏ô‡∏Ñ‡∏£‡∏¥‡∏ô‡∏ó‡∏£‡πå',
  '‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå', '‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏®‡∏¥‡∏•‡∏õ‡∏Å‡∏£‡∏£‡∏°‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå', '‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏£‡∏≤‡∏°‡∏Ñ‡∏≥‡πÅ‡∏´‡∏á'
]

const provinces = [
  '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£', '‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà', '‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô', '‡∏™‡∏á‡∏Ç‡∏•‡∏≤', '‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤',
  '‡∏£‡∏∞‡∏¢‡∏≠‡∏á', '‡∏ä‡∏•‡∏ö‡∏∏‡∏£‡∏µ', '‡∏†‡∏π‡πÄ‡∏Å‡πá‡∏ï', '‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏¢', '‡∏≠‡∏∏‡∏î‡∏£‡∏ò‡∏≤‡∏ô‡∏µ', '‡∏™‡∏∏‡∏£‡∏≤‡∏©‡∏é‡∏£‡πå‡∏ò‡∏≤‡∏ô‡∏µ'
]

function getRandomElement<T>(array: T[]): T {
  return array[Math.floor(Math.random() * array.length)]
}

function getRandomElements<T>(array: T[], count: number): T[] {
  const shuffled = [...array].sort(() => 0.5 - Math.random())
  return shuffled.slice(0, count)
}

function generatePhoneNumber(): string {
  const prefixes = ['08', '09', '06']
  const prefix = getRandomElement(prefixes)
  const number = Math.floor(Math.random() * 100000000).toString().padStart(8, '0')
  return `${prefix}${number.substring(0, 1)}-${number.substring(1, 4)}-${number.substring(4, 8)}`
}

function generateEmail(firstName: string, lastName: string, index: number): string {
  const domains = ['gmail.com', 'hotmail.com', 'yahoo.com', 'outlook.com']
  const englishName = firstName.toLowerCase().replace(/[^\w]/g, '') + '.' + lastName.toLowerCase().replace(/[^\w]/g, '')
  return `${englishName}${index}${Math.floor(Math.random() * 1000)}@${getRandomElement(domains)}`
}

function getRandomDate(start: Date, end: Date): Date {
  return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()))
}

function getRandomFutureDate(daysAhead: number): Date {
  const today = new Date()
  const futureDate = new Date(today)
  futureDate.setDate(today.getDate() + Math.floor(Math.random() * daysAhead))
  return futureDate
}

async function generateDummyData() {
  console.log('üöÄ Generating comprehensive dummy data...')

  // Generate 25 clients
  console.log('üë• Creating clients...')
  const clients = []
  for (let i = 0; i < 25; i++) {
    const firstName = getRandomElement(thaiFirstNames)
    const lastName = getRandomElement(thaiLastNames)
    const email = generateEmail(firstName, lastName, i)
    const password = await bcrypt.hash('password123', 12)
    
    const client = await prisma.user.create({
      data: {
        email,
        password,
        name: `${firstName} ${lastName}`,
        role: 'CLIENT',
        verified: Math.random() > 0.2, // 80% verified
        clientProfile: {
          create: {
            firstName,
            lastName,
            dateOfBirth: getRandomDate(new Date('1970-01-01'), new Date('2000-01-01')),
            phone: generatePhoneNumber(),
            address: `${Math.floor(Math.random() * 999) + 1} ‡∏ñ‡∏ô‡∏ô‡∏™‡∏∏‡∏Ç‡∏∏‡∏°‡∏ß‡∏¥‡∏ó ${getRandomElement(provinces)}`,
            emergencyContact: `${getRandomElement(thaiFirstNames)} ${getRandomElement(thaiLastNames)}`,
            emergencyPhone: generatePhoneNumber(),
            insuranceProvider: Math.random() > 0.5 ? getRandomElement(['‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏™‡∏±‡∏á‡∏Ñ‡∏°', '‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï AIA', '‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û Bangkok Insurance']) : null,
            insuranceNumber: Math.random() > 0.5 ? `INS${Math.floor(Math.random() * 1000000)}` : null,
            mentalHealthHistory: Math.random() > 0.7 ? '‡πÄ‡∏Ñ‡∏¢‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô' : null,
            currentMedications: Math.random() > 0.8 ? '‡∏¢‡∏≤‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô, ‡∏ß‡∏¥‡∏ï‡∏≤‡∏°‡∏¥‡∏ô' : null,
            preferredLanguage: Math.random() > 0.8 ? 'ENGLISH' : 'THAI'
          }
        }
      }
    })
    clients.push(client)
  }

  // Generate 15 therapists
  console.log('üë®‚Äç‚öïÔ∏è Creating therapists...')
  const therapists = []
  for (let i = 0; i < 15; i++) {
    const firstName = getRandomElement(thaiFirstNames)
    const lastName = getRandomElement(thaiLastNames)
    const email = generateEmail(firstName, lastName, i)
    const password = await bcrypt.hash('password123', 12)
    const title = getRandomElement(['‡∏î‡∏£.', '‡∏≠.', '‡∏ú‡∏®.', '‡∏£‡∏®.'])
    const experience = Math.floor(Math.random() * 20) + 1
    const hourlyRate = (Math.floor(Math.random() * 10) + 10) * 100 // 1000-2000 THB
    const rating = Math.random() * 2 + 3 // 3.0-5.0
    const totalSessions = Math.floor(Math.random() * 500) + 10
    
    const therapist = await prisma.user.create({
      data: {
        email,
        password,
        name: `${title}${firstName} ${lastName}`,
        role: 'THERAPIST',
        verified: Math.random() > 0.1, // 90% verified
        therapistProfile: {
          create: {
            firstName,
            lastName,
            title,
            licenseNumber: `PSY-${new Date().getFullYear()}-${(i + 2).toString().padStart(3, '0')}`,
            specializations: getRandomElements(specializations, Math.floor(Math.random() * 4) + 2),
            experience,
            education: `‡∏õ‡∏£‡∏¥‡∏ç‡∏ç‡∏≤${getRandomElement(['‡πÇ‡∏ó', '‡πÄ‡∏≠‡∏Å'])} ‡∏à‡∏¥‡∏ï‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏Ñ‡∏•‡∏¥‡∏ô‡∏¥‡∏Å ${getRandomElement(universities)}`,
            languages: Math.random() > 0.3 ? ['‡πÑ‡∏ó‡∏¢', '‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©'] : ['‡πÑ‡∏ó‡∏¢'],
            bio: `‡∏ô‡∏±‡∏Å‡∏à‡∏¥‡∏ï‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏Ñ‡∏•‡∏¥‡∏ô‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå ${experience} ‡∏õ‡∏µ ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏î‡πâ‡∏≤‡∏ô${getRandomElements(specializations, 2).join('‡πÅ‡∏•‡∏∞')} ‡∏°‡∏∏‡πà‡∏á‡πÄ‡∏ô‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°‡πÑ‡∏ó‡∏¢ ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ö‡∏≥‡∏ö‡∏±‡∏î‡πÅ‡∏ö‡∏ö‡∏≠‡∏á‡∏Ñ‡πå‡∏£‡∏ß‡∏°‡∏ó‡∏µ‡πà‡∏ú‡∏™‡∏°‡∏ú‡∏™‡∏≤‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏à‡∏¥‡∏ï‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏™‡∏°‡∏±‡∏¢‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡∏∞‡∏†‡∏π‡∏°‡∏¥‡∏õ‡∏±‡∏ç‡∏ç‡∏≤‡πÑ‡∏ó‡∏¢`,
            hourlyRate,
            availableOnline: Math.random() > 0.1, // 90% available online
            availableInPerson: Math.random() > 0.4, // 60% available in person
            address: Math.random() > 0.4 ? getRandomElement(provinces) : null,
            verified: Math.random() > 0.2, // 80% verified
            rating,
            totalSessions
          }
        }
      }
    })
    therapists.push(therapist)
  }

  // Generate therapist availability
  console.log('üìÖ Creating therapist availability...')
  for (const therapist of therapists) {
    const therapistProfile = await prisma.therapistProfile.findUnique({
      where: { userId: therapist.id }
    })
    
    if (therapistProfile) {
      // Random availability pattern
      const availableDays = getRandomElements([1, 2, 3, 4, 5, 6, 0], Math.floor(Math.random() * 4) + 3)
      
      for (const day of availableDays) {
        const startHour = Math.floor(Math.random() * 4) + 8 // 8-11 AM
        const endHour = startHour + Math.floor(Math.random() * 6) + 4 // 4-9 hours later
        
        await prisma.therapistAvailability.create({
          data: {
            therapistId: therapistProfile.id,
            dayOfWeek: day,
            startTime: `${startHour.toString().padStart(2, '0')}:00`,
            endTime: `${Math.min(endHour, 20).toString().padStart(2, '0')}:00`,
            isAvailable: Math.random() > 0.1 // 90% available
          }
        })
      }
    }
  }

  // Generate appointments
  console.log('üìù Creating appointments...')
  const appointments = []
  for (let i = 0; i < 50; i++) {
    const client = getRandomElement(clients)
    const therapist = getRandomElement(therapists)
    const appointmentDate = getRandomFutureDate(60) // Next 60 days
    const hour = Math.floor(Math.random() * 10) + 9 // 9 AM - 6 PM
    appointmentDate.setHours(hour, 0, 0, 0)
    
    const statuses = ['SCHEDULED', 'COMPLETED', 'CANCELLED', 'NO_SHOW']
    const status = getRandomElement(statuses)
    
    const appointment = await prisma.appointment.create({
      data: {
        clientId: client.id,
        therapistId: therapist.id,
        dateTime: appointmentDate,
        duration: getRandomElement([60, 90, 120]),
        type: getRandomElement(['ONLINE', 'IN_PERSON']),
        status: status as any,
        notes: Math.random() > 0.5 ? '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô' : null,
        sessionLink: status === 'SCHEDULED' && Math.random() > 0.5 ? 'https://meet.therajai.com/session-' + Math.random().toString(36).substring(7) : null
      }
    })
    appointments.push(appointment)
  }

  // Generate sessions for completed appointments
  console.log('üéØ Creating sessions...')
  const completedAppointments = appointments.filter(apt => 
    Math.random() > 0.3 // Some completed appointments have sessions
  )
  
  for (const appointment of completedAppointments.slice(0, 25)) {
    const startTime = new Date(appointment.dateTime)
    const endTime = new Date(startTime)
    endTime.setMinutes(startTime.getMinutes() + appointment.duration)
    
    await prisma.session.create({
      data: {
        appointmentId: appointment.id,
        clientId: appointment.clientId,
        therapistId: appointment.therapistId,
        startTime,
        endTime,
        sessionNotes: `‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡∏î‡∏µ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡πâ‡∏≤‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ö${getRandomElement(specializations)} ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏ù‡∏∂‡∏Å‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏Å‡∏≤‡∏£‡∏ú‡πà‡∏≠‡∏ô‡∏Ñ‡∏•‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ`,
        clientFeedback: Math.random() > 0.3 ? `‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏°‡∏≤‡∏Å ‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤ ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì${getRandomElement(['‡∏î‡∏£.', '‡∏≠.', '‡∏Ñ‡∏∏‡∏ì'])}${getRandomElement(thaiFirstNames)}‡∏°‡∏≤‡∏Å‡∏Ñ‡πà‡∏∞` : null,
        rating: Math.random() > 0.2 ? Math.floor(Math.random() * 2) + 4 : null // 4-5 stars mostly
      }
    })
  }

  // Generate payments
  console.log('üí≥ Creating payments...')
  const paidAppointments = appointments.filter(apt => 
    Math.random() > 0.2 // 80% have payments
  )
  
  for (const appointment of paidAppointments.slice(0, 35)) {
    const therapistProfile = await prisma.therapistProfile.findUnique({
      where: { userId: appointment.therapistId }
    })
    
    if (therapistProfile) {
      const amount = (therapistProfile.hourlyRate.toNumber() * appointment.duration) / 60
      const statuses = ['COMPLETED', 'PENDING', 'FAILED', 'REFUNDED']
      const status = getRandomElement(statuses)
      
      await prisma.payment.create({
        data: {
          appointmentId: appointment.id,
          clientId: appointment.clientId,
          amount,
          currency: 'THB',
          status: status as any,
          stripePaymentId: status === 'COMPLETED' ? 'pi_' + Math.random().toString(36).substring(7) : null,
          stripeIntentId: 'pi_' + Math.random().toString(36).substring(7)
        }
      })
    }
  }

  console.log('‚úÖ Dummy data generation completed!')
  
  // Print summary
  const userCount = await prisma.user.count()
  const clientCount = await prisma.clientProfile.count()
  const therapistCount = await prisma.therapistProfile.count()
  const appointmentCount = await prisma.appointment.count()
  const sessionCount = await prisma.session.count()
  const paymentCount = await prisma.payment.count()
  const availabilityCount = await prisma.therapistAvailability.count()
  
  console.log('\nüìä Database Summary:')
  console.log(`üë• Users: ${userCount}`)
  console.log(`üôã Clients: ${clientCount}`)
  console.log(`üë®‚Äç‚öïÔ∏è Therapists: ${therapistCount}`)
  console.log(`üìÖ Appointments: ${appointmentCount}`)
  console.log(`üéØ Sessions: ${sessionCount}`)
  console.log(`üí≥ Payments: ${paymentCount}`)
  console.log(`‚è∞ Availability Slots: ${availabilityCount}`)
  
  console.log('\nüîê Login Credentials:')
  console.log('All users have password: password123')
  console.log('Original test users still available with their original passwords')
}

async function main() {
  try {
    await generateDummyData()
  } catch (error) {
    console.error('‚ùå Error generating dummy data:', error)
  } finally {
    await prisma.$disconnect()
  }
}

main()